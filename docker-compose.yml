services:
  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: grocery-frontend
    ports:
      - "3005:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend
    networks:
      - grocery-network

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: grocery-backend
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=grocery_management
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=your_jwt_secret_key_here
      - JWT_EXPIRES_IN=24h
      - CORS_ORIGIN=http://localhost:3004
    depends_on:
      - postgres
    networks:
      - grocery-network

  # PostgreSQL Service
  postgres:
    image: postgres:14-alpine
    container_name: grocery-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=grocery_management
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - grocery-network

  # PgAdmin Service (Optional - for database management)
  pgadmin:
    build:
      context: .
      dockerfile: pgadmin.Dockerfile
    container_name: grocery-pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    depends_on:
      - postgres
    networks:
      - grocery-network

networks:
  grocery-network:
    driver: bridge

volumes:
  postgres-data: